// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/tarrencev/starknet-indexer/ent/balance"
	"github.com/tarrencev/starknet-indexer/ent/block"
	"github.com/tarrencev/starknet-indexer/ent/contract"
	"github.com/tarrencev/starknet-indexer/ent/event"
	"github.com/tarrencev/starknet-indexer/ent/token"
	"github.com/tarrencev/starknet-indexer/ent/transaction"
	"github.com/tarrencev/starknet-indexer/ent/transactionreceipt"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    string `msgpack:"i"`
	Value Value  `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// BalanceEdge is the edge representation of Balance.
type BalanceEdge struct {
	Node   *Balance `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// BalanceConnection is the connection containing edges to Balance.
type BalanceConnection struct {
	Edges      []*BalanceEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *BalanceConnection) build(nodes []*Balance, pager *balancePager, first, last *int) {
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Balance
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Balance {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Balance {
			return nodes[i]
		}
	}
	c.Edges = make([]*BalanceEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BalanceEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BalancePaginateOption enables pagination customization.
type BalancePaginateOption func(*balancePager) error

// WithBalanceOrder configures pagination ordering.
func WithBalanceOrder(order *BalanceOrder) BalancePaginateOption {
	if order == nil {
		order = DefaultBalanceOrder
	}
	o := *order
	return func(pager *balancePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBalanceOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBalanceFilter configures pagination filter.
func WithBalanceFilter(filter func(*BalanceQuery) (*BalanceQuery, error)) BalancePaginateOption {
	return func(pager *balancePager) error {
		if filter == nil {
			return errors.New("BalanceQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type balancePager struct {
	order  *BalanceOrder
	filter func(*BalanceQuery) (*BalanceQuery, error)
}

func newBalancePager(opts []BalancePaginateOption) (*balancePager, error) {
	pager := &balancePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBalanceOrder
	}
	return pager, nil
}

func (p *balancePager) applyFilter(query *BalanceQuery) (*BalanceQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *balancePager) toCursor(b *Balance) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *balancePager) applyCursors(query *BalanceQuery, after, before *Cursor) *BalanceQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultBalanceOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *balancePager) applyOrder(query *BalanceQuery, reverse bool) *BalanceQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultBalanceOrder.Field {
		query = query.Order(direction.orderFunc(DefaultBalanceOrder.Field.field))
	}
	return query
}

func (p *balancePager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBalanceOrder.Field {
			b.Comma().Ident(DefaultBalanceOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Balance.
func (b *BalanceQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BalancePaginateOption,
) (*BalanceConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBalancePager(opts)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BalanceConnection{Edges: []*BalanceEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = b.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := b.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	b = pager.applyCursors(b, after, before)
	b = pager.applyOrder(b, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := b.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, first, last)
	return conn, nil
}

// BalanceOrderField defines the ordering field of Balance.
type BalanceOrderField struct {
	field    string
	toCursor func(*Balance) Cursor
}

// BalanceOrder defines the ordering of Balance.
type BalanceOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *BalanceOrderField `json:"field"`
}

// DefaultBalanceOrder is the default ordering of Balance.
var DefaultBalanceOrder = &BalanceOrder{
	Direction: OrderDirectionAsc,
	Field: &BalanceOrderField{
		field: balance.FieldID,
		toCursor: func(b *Balance) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Balance into BalanceEdge.
func (b *Balance) ToEdge(order *BalanceOrder) *BalanceEdge {
	if order == nil {
		order = DefaultBalanceOrder
	}
	return &BalanceEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// BlockEdge is the edge representation of Block.
type BlockEdge struct {
	Node   *Block `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// BlockConnection is the connection containing edges to Block.
type BlockConnection struct {
	Edges      []*BlockEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *BlockConnection) build(nodes []*Block, pager *blockPager, first, last *int) {
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Block
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Block {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Block {
			return nodes[i]
		}
	}
	c.Edges = make([]*BlockEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &BlockEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// BlockPaginateOption enables pagination customization.
type BlockPaginateOption func(*blockPager) error

// WithBlockOrder configures pagination ordering.
func WithBlockOrder(order *BlockOrder) BlockPaginateOption {
	if order == nil {
		order = DefaultBlockOrder
	}
	o := *order
	return func(pager *blockPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultBlockOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithBlockFilter configures pagination filter.
func WithBlockFilter(filter func(*BlockQuery) (*BlockQuery, error)) BlockPaginateOption {
	return func(pager *blockPager) error {
		if filter == nil {
			return errors.New("BlockQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type blockPager struct {
	order  *BlockOrder
	filter func(*BlockQuery) (*BlockQuery, error)
}

func newBlockPager(opts []BlockPaginateOption) (*blockPager, error) {
	pager := &blockPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultBlockOrder
	}
	return pager, nil
}

func (p *blockPager) applyFilter(query *BlockQuery) (*BlockQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *blockPager) toCursor(b *Block) Cursor {
	return p.order.Field.toCursor(b)
}

func (p *blockPager) applyCursors(query *BlockQuery, after, before *Cursor) *BlockQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultBlockOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *blockPager) applyOrder(query *BlockQuery, reverse bool) *BlockQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultBlockOrder.Field {
		query = query.Order(direction.orderFunc(DefaultBlockOrder.Field.field))
	}
	return query
}

func (p *blockPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultBlockOrder.Field {
			b.Comma().Ident(DefaultBlockOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Block.
func (b *BlockQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...BlockPaginateOption,
) (*BlockConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newBlockPager(opts)
	if err != nil {
		return nil, err
	}
	if b, err = pager.applyFilter(b); err != nil {
		return nil, err
	}
	conn := &BlockConnection{Edges: []*BlockEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = b.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := b.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	b = pager.applyCursors(b, after, before)
	b = pager.applyOrder(b, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		b.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := b.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := b.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, first, last)
	return conn, nil
}

var (
	// BlockOrderFieldBlockNumber orders Block by block_number.
	BlockOrderFieldBlockNumber = &BlockOrderField{
		field: block.FieldBlockNumber,
		toCursor: func(b *Block) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.BlockNumber,
			}
		},
	}
	// BlockOrderFieldTimestamp orders Block by timestamp.
	BlockOrderFieldTimestamp = &BlockOrderField{
		field: block.FieldTimestamp,
		toCursor: func(b *Block) Cursor {
			return Cursor{
				ID:    b.ID,
				Value: b.Timestamp,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f BlockOrderField) String() string {
	var str string
	switch f.field {
	case block.FieldBlockNumber:
		str = "BLOCK_NUMBER"
	case block.FieldTimestamp:
		str = "TIMESTAMP"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f BlockOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *BlockOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("BlockOrderField %T must be a string", v)
	}
	switch str {
	case "BLOCK_NUMBER":
		*f = *BlockOrderFieldBlockNumber
	case "TIMESTAMP":
		*f = *BlockOrderFieldTimestamp
	default:
		return fmt.Errorf("%s is not a valid BlockOrderField", str)
	}
	return nil
}

// BlockOrderField defines the ordering field of Block.
type BlockOrderField struct {
	field    string
	toCursor func(*Block) Cursor
}

// BlockOrder defines the ordering of Block.
type BlockOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *BlockOrderField `json:"field"`
}

// DefaultBlockOrder is the default ordering of Block.
var DefaultBlockOrder = &BlockOrder{
	Direction: OrderDirectionAsc,
	Field: &BlockOrderField{
		field: block.FieldID,
		toCursor: func(b *Block) Cursor {
			return Cursor{ID: b.ID}
		},
	},
}

// ToEdge converts Block into BlockEdge.
func (b *Block) ToEdge(order *BlockOrder) *BlockEdge {
	if order == nil {
		order = DefaultBlockOrder
	}
	return &BlockEdge{
		Node:   b,
		Cursor: order.Field.toCursor(b),
	}
}

// ContractEdge is the edge representation of Contract.
type ContractEdge struct {
	Node   *Contract `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// ContractConnection is the connection containing edges to Contract.
type ContractConnection struct {
	Edges      []*ContractEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *ContractConnection) build(nodes []*Contract, pager *contractPager, first, last *int) {
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Contract
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Contract {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Contract {
			return nodes[i]
		}
	}
	c.Edges = make([]*ContractEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ContractEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ContractPaginateOption enables pagination customization.
type ContractPaginateOption func(*contractPager) error

// WithContractOrder configures pagination ordering.
func WithContractOrder(order *ContractOrder) ContractPaginateOption {
	if order == nil {
		order = DefaultContractOrder
	}
	o := *order
	return func(pager *contractPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultContractOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithContractFilter configures pagination filter.
func WithContractFilter(filter func(*ContractQuery) (*ContractQuery, error)) ContractPaginateOption {
	return func(pager *contractPager) error {
		if filter == nil {
			return errors.New("ContractQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type contractPager struct {
	order  *ContractOrder
	filter func(*ContractQuery) (*ContractQuery, error)
}

func newContractPager(opts []ContractPaginateOption) (*contractPager, error) {
	pager := &contractPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultContractOrder
	}
	return pager, nil
}

func (p *contractPager) applyFilter(query *ContractQuery) (*ContractQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *contractPager) toCursor(c *Contract) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *contractPager) applyCursors(query *ContractQuery, after, before *Cursor) *ContractQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultContractOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *contractPager) applyOrder(query *ContractQuery, reverse bool) *ContractQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultContractOrder.Field {
		query = query.Order(direction.orderFunc(DefaultContractOrder.Field.field))
	}
	return query
}

func (p *contractPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultContractOrder.Field {
			b.Comma().Ident(DefaultContractOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Contract.
func (c *ContractQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ContractPaginateOption,
) (*ContractConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newContractPager(opts)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &ContractConnection{Edges: []*ContractEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := c.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	c = pager.applyCursors(c, after, before)
	c = pager.applyOrder(c, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := c.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, first, last)
	return conn, nil
}

var (
	// ContractOrderFieldCreatedAt orders Contract by created_at.
	ContractOrderFieldCreatedAt = &ContractOrderField{
		field: contract.FieldCreatedAt,
		toCursor: func(c *Contract) Cursor {
			return Cursor{
				ID:    c.ID,
				Value: c.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f ContractOrderField) String() string {
	var str string
	switch f.field {
	case contract.FieldCreatedAt:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f ContractOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *ContractOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("ContractOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *ContractOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid ContractOrderField", str)
	}
	return nil
}

// ContractOrderField defines the ordering field of Contract.
type ContractOrderField struct {
	field    string
	toCursor func(*Contract) Cursor
}

// ContractOrder defines the ordering of Contract.
type ContractOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *ContractOrderField `json:"field"`
}

// DefaultContractOrder is the default ordering of Contract.
var DefaultContractOrder = &ContractOrder{
	Direction: OrderDirectionAsc,
	Field: &ContractOrderField{
		field: contract.FieldID,
		toCursor: func(c *Contract) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Contract into ContractEdge.
func (c *Contract) ToEdge(order *ContractOrder) *ContractEdge {
	if order == nil {
		order = DefaultContractOrder
	}
	return &ContractEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// EventEdge is the edge representation of Event.
type EventEdge struct {
	Node   *Event `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// EventConnection is the connection containing edges to Event.
type EventConnection struct {
	Edges      []*EventEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *EventConnection) build(nodes []*Event, pager *eventPager, first, last *int) {
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Event
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Event {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Event {
			return nodes[i]
		}
	}
	c.Edges = make([]*EventEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &EventEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// EventPaginateOption enables pagination customization.
type EventPaginateOption func(*eventPager) error

// WithEventOrder configures pagination ordering.
func WithEventOrder(order *EventOrder) EventPaginateOption {
	if order == nil {
		order = DefaultEventOrder
	}
	o := *order
	return func(pager *eventPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultEventOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithEventFilter configures pagination filter.
func WithEventFilter(filter func(*EventQuery) (*EventQuery, error)) EventPaginateOption {
	return func(pager *eventPager) error {
		if filter == nil {
			return errors.New("EventQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type eventPager struct {
	order  *EventOrder
	filter func(*EventQuery) (*EventQuery, error)
}

func newEventPager(opts []EventPaginateOption) (*eventPager, error) {
	pager := &eventPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultEventOrder
	}
	return pager, nil
}

func (p *eventPager) applyFilter(query *EventQuery) (*EventQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *eventPager) toCursor(e *Event) Cursor {
	return p.order.Field.toCursor(e)
}

func (p *eventPager) applyCursors(query *EventQuery, after, before *Cursor) *EventQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultEventOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *eventPager) applyOrder(query *EventQuery, reverse bool) *EventQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultEventOrder.Field {
		query = query.Order(direction.orderFunc(DefaultEventOrder.Field.field))
	}
	return query
}

func (p *eventPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultEventOrder.Field {
			b.Comma().Ident(DefaultEventOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Event.
func (e *EventQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...EventPaginateOption,
) (*EventConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newEventPager(opts)
	if err != nil {
		return nil, err
	}
	if e, err = pager.applyFilter(e); err != nil {
		return nil, err
	}
	conn := &EventConnection{Edges: []*EventEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = e.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := e.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	e = pager.applyCursors(e, after, before)
	e = pager.applyOrder(e, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		e.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := e.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := e.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, first, last)
	return conn, nil
}

// EventOrderField defines the ordering field of Event.
type EventOrderField struct {
	field    string
	toCursor func(*Event) Cursor
}

// EventOrder defines the ordering of Event.
type EventOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *EventOrderField `json:"field"`
}

// DefaultEventOrder is the default ordering of Event.
var DefaultEventOrder = &EventOrder{
	Direction: OrderDirectionAsc,
	Field: &EventOrderField{
		field: event.FieldID,
		toCursor: func(e *Event) Cursor {
			return Cursor{ID: e.ID}
		},
	},
}

// ToEdge converts Event into EventEdge.
func (e *Event) ToEdge(order *EventOrder) *EventEdge {
	if order == nil {
		order = DefaultEventOrder
	}
	return &EventEdge{
		Node:   e,
		Cursor: order.Field.toCursor(e),
	}
}

// TokenEdge is the edge representation of Token.
type TokenEdge struct {
	Node   *Token `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TokenConnection is the connection containing edges to Token.
type TokenConnection struct {
	Edges      []*TokenEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *TokenConnection) build(nodes []*Token, pager *tokenPager, first, last *int) {
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Token
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Token {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Token {
			return nodes[i]
		}
	}
	c.Edges = make([]*TokenEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TokenEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TokenPaginateOption enables pagination customization.
type TokenPaginateOption func(*tokenPager) error

// WithTokenOrder configures pagination ordering.
func WithTokenOrder(order *TokenOrder) TokenPaginateOption {
	if order == nil {
		order = DefaultTokenOrder
	}
	o := *order
	return func(pager *tokenPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTokenOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTokenFilter configures pagination filter.
func WithTokenFilter(filter func(*TokenQuery) (*TokenQuery, error)) TokenPaginateOption {
	return func(pager *tokenPager) error {
		if filter == nil {
			return errors.New("TokenQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type tokenPager struct {
	order  *TokenOrder
	filter func(*TokenQuery) (*TokenQuery, error)
}

func newTokenPager(opts []TokenPaginateOption) (*tokenPager, error) {
	pager := &tokenPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTokenOrder
	}
	return pager, nil
}

func (p *tokenPager) applyFilter(query *TokenQuery) (*TokenQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *tokenPager) toCursor(t *Token) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *tokenPager) applyCursors(query *TokenQuery, after, before *Cursor) *TokenQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTokenOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *tokenPager) applyOrder(query *TokenQuery, reverse bool) *TokenQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTokenOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTokenOrder.Field.field))
	}
	return query
}

func (p *tokenPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTokenOrder.Field {
			b.Comma().Ident(DefaultTokenOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Token.
func (t *TokenQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TokenPaginateOption,
) (*TokenConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTokenPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TokenConnection{Edges: []*TokenEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = t.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, first, last)
	return conn, nil
}

// TokenOrderField defines the ordering field of Token.
type TokenOrderField struct {
	field    string
	toCursor func(*Token) Cursor
}

// TokenOrder defines the ordering of Token.
type TokenOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *TokenOrderField `json:"field"`
}

// DefaultTokenOrder is the default ordering of Token.
var DefaultTokenOrder = &TokenOrder{
	Direction: OrderDirectionAsc,
	Field: &TokenOrderField{
		field: token.FieldID,
		toCursor: func(t *Token) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Token into TokenEdge.
func (t *Token) ToEdge(order *TokenOrder) *TokenEdge {
	if order == nil {
		order = DefaultTokenOrder
	}
	return &TokenEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TransactionEdge is the edge representation of Transaction.
type TransactionEdge struct {
	Node   *Transaction `json:"node"`
	Cursor Cursor       `json:"cursor"`
}

// TransactionConnection is the connection containing edges to Transaction.
type TransactionConnection struct {
	Edges      []*TransactionEdge `json:"edges"`
	PageInfo   PageInfo           `json:"pageInfo"`
	TotalCount int                `json:"totalCount"`
}

func (c *TransactionConnection) build(nodes []*Transaction, pager *transactionPager, first, last *int) {
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Transaction
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Transaction {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Transaction {
			return nodes[i]
		}
	}
	c.Edges = make([]*TransactionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TransactionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TransactionPaginateOption enables pagination customization.
type TransactionPaginateOption func(*transactionPager) error

// WithTransactionOrder configures pagination ordering.
func WithTransactionOrder(order *TransactionOrder) TransactionPaginateOption {
	if order == nil {
		order = DefaultTransactionOrder
	}
	o := *order
	return func(pager *transactionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTransactionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTransactionFilter configures pagination filter.
func WithTransactionFilter(filter func(*TransactionQuery) (*TransactionQuery, error)) TransactionPaginateOption {
	return func(pager *transactionPager) error {
		if filter == nil {
			return errors.New("TransactionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type transactionPager struct {
	order  *TransactionOrder
	filter func(*TransactionQuery) (*TransactionQuery, error)
}

func newTransactionPager(opts []TransactionPaginateOption) (*transactionPager, error) {
	pager := &transactionPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTransactionOrder
	}
	return pager, nil
}

func (p *transactionPager) applyFilter(query *TransactionQuery) (*TransactionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *transactionPager) toCursor(t *Transaction) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *transactionPager) applyCursors(query *TransactionQuery, after, before *Cursor) *TransactionQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTransactionOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *transactionPager) applyOrder(query *TransactionQuery, reverse bool) *TransactionQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTransactionOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTransactionOrder.Field.field))
	}
	return query
}

func (p *transactionPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTransactionOrder.Field {
			b.Comma().Ident(DefaultTransactionOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Transaction.
func (t *TransactionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TransactionPaginateOption,
) (*TransactionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTransactionPager(opts)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TransactionConnection{Edges: []*TransactionEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = t.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := t.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	t = pager.applyCursors(t, after, before)
	t = pager.applyOrder(t, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := t.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, first, last)
	return conn, nil
}

var (
	// TransactionOrderFieldNonce orders Transaction by nonce.
	TransactionOrderFieldNonce = &TransactionOrderField{
		field: transaction.FieldNonce,
		toCursor: func(t *Transaction) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Nonce,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TransactionOrderField) String() string {
	var str string
	switch f.field {
	case transaction.FieldNonce:
		str = "NONCE"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TransactionOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TransactionOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TransactionOrderField %T must be a string", v)
	}
	switch str {
	case "NONCE":
		*f = *TransactionOrderFieldNonce
	default:
		return fmt.Errorf("%s is not a valid TransactionOrderField", str)
	}
	return nil
}

// TransactionOrderField defines the ordering field of Transaction.
type TransactionOrderField struct {
	field    string
	toCursor func(*Transaction) Cursor
}

// TransactionOrder defines the ordering of Transaction.
type TransactionOrder struct {
	Direction OrderDirection         `json:"direction"`
	Field     *TransactionOrderField `json:"field"`
}

// DefaultTransactionOrder is the default ordering of Transaction.
var DefaultTransactionOrder = &TransactionOrder{
	Direction: OrderDirectionAsc,
	Field: &TransactionOrderField{
		field: transaction.FieldID,
		toCursor: func(t *Transaction) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Transaction into TransactionEdge.
func (t *Transaction) ToEdge(order *TransactionOrder) *TransactionEdge {
	if order == nil {
		order = DefaultTransactionOrder
	}
	return &TransactionEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}

// TransactionReceiptEdge is the edge representation of TransactionReceipt.
type TransactionReceiptEdge struct {
	Node   *TransactionReceipt `json:"node"`
	Cursor Cursor              `json:"cursor"`
}

// TransactionReceiptConnection is the connection containing edges to TransactionReceipt.
type TransactionReceiptConnection struct {
	Edges      []*TransactionReceiptEdge `json:"edges"`
	PageInfo   PageInfo                  `json:"pageInfo"`
	TotalCount int                       `json:"totalCount"`
}

func (c *TransactionReceiptConnection) build(nodes []*TransactionReceipt, pager *transactionreceiptPager, first, last *int) {
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *TransactionReceipt
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *TransactionReceipt {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *TransactionReceipt {
			return nodes[i]
		}
	}
	c.Edges = make([]*TransactionReceiptEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TransactionReceiptEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TransactionReceiptPaginateOption enables pagination customization.
type TransactionReceiptPaginateOption func(*transactionreceiptPager) error

// WithTransactionReceiptOrder configures pagination ordering.
func WithTransactionReceiptOrder(order *TransactionReceiptOrder) TransactionReceiptPaginateOption {
	if order == nil {
		order = DefaultTransactionReceiptOrder
	}
	o := *order
	return func(pager *transactionreceiptPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTransactionReceiptOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTransactionReceiptFilter configures pagination filter.
func WithTransactionReceiptFilter(filter func(*TransactionReceiptQuery) (*TransactionReceiptQuery, error)) TransactionReceiptPaginateOption {
	return func(pager *transactionreceiptPager) error {
		if filter == nil {
			return errors.New("TransactionReceiptQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type transactionreceiptPager struct {
	order  *TransactionReceiptOrder
	filter func(*TransactionReceiptQuery) (*TransactionReceiptQuery, error)
}

func newTransactionReceiptPager(opts []TransactionReceiptPaginateOption) (*transactionreceiptPager, error) {
	pager := &transactionreceiptPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTransactionReceiptOrder
	}
	return pager, nil
}

func (p *transactionreceiptPager) applyFilter(query *TransactionReceiptQuery) (*TransactionReceiptQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *transactionreceiptPager) toCursor(tr *TransactionReceipt) Cursor {
	return p.order.Field.toCursor(tr)
}

func (p *transactionreceiptPager) applyCursors(query *TransactionReceiptQuery, after, before *Cursor) *TransactionReceiptQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultTransactionReceiptOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *transactionreceiptPager) applyOrder(query *TransactionReceiptQuery, reverse bool) *TransactionReceiptQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultTransactionReceiptOrder.Field {
		query = query.Order(direction.orderFunc(DefaultTransactionReceiptOrder.Field.field))
	}
	return query
}

func (p *transactionreceiptPager) orderExpr(reverse bool) sql.Querier {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.field).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTransactionReceiptOrder.Field {
			b.Comma().Ident(DefaultTransactionReceiptOrder.Field.field).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to TransactionReceipt.
func (tr *TransactionReceiptQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TransactionReceiptPaginateOption,
) (*TransactionReceiptConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTransactionReceiptPager(opts)
	if err != nil {
		return nil, err
	}
	if tr, err = pager.applyFilter(tr); err != nil {
		return nil, err
	}
	conn := &TransactionReceiptConnection{Edges: []*TransactionReceiptEdge{}}
	if !hasCollectedField(ctx, edgesField) || first != nil && *first == 0 || last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
			if conn.TotalCount, err = tr.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) && hasCollectedField(ctx, totalCountField) {
		count, err := tr.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	tr = pager.applyCursors(tr, after, before)
	tr = pager.applyOrder(tr, last != nil)
	if limit := paginateLimit(first, last); limit != 0 {
		tr.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := tr.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}

	nodes, err := tr.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}
	conn.build(nodes, pager, first, last)
	return conn, nil
}

// TransactionReceiptOrderField defines the ordering field of TransactionReceipt.
type TransactionReceiptOrderField struct {
	field    string
	toCursor func(*TransactionReceipt) Cursor
}

// TransactionReceiptOrder defines the ordering of TransactionReceipt.
type TransactionReceiptOrder struct {
	Direction OrderDirection                `json:"direction"`
	Field     *TransactionReceiptOrderField `json:"field"`
}

// DefaultTransactionReceiptOrder is the default ordering of TransactionReceipt.
var DefaultTransactionReceiptOrder = &TransactionReceiptOrder{
	Direction: OrderDirectionAsc,
	Field: &TransactionReceiptOrderField{
		field: transactionreceipt.FieldID,
		toCursor: func(tr *TransactionReceipt) Cursor {
			return Cursor{ID: tr.ID}
		},
	},
}

// ToEdge converts TransactionReceipt into TransactionReceiptEdge.
func (tr *TransactionReceipt) ToEdge(order *TransactionReceiptOrder) *TransactionReceiptEdge {
	if order == nil {
		order = DefaultTransactionReceiptOrder
	}
	return &TransactionReceiptEdge{
		Node:   tr,
		Cursor: order.Field.toCursor(tr),
	}
}
