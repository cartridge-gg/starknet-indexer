// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/tarrencev/starknet-indexer/ent/balance"
	"github.com/tarrencev/starknet-indexer/ent/contract"
)

// Balance is the model entity for the Balance schema.
type Balance struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Balance holds the value of the "balance" field.
	Balance uint64 `json:"balance,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BalanceQuery when eager-loading is set.
	Edges            BalanceEdges `json:"edges"`
	balance_account  *string
	balance_contract *string
}

// BalanceEdges holds the relations/edges for other nodes in the graph.
type BalanceEdges struct {
	// Account holds the value of the account edge.
	Account *Contract `json:"account,omitempty"`
	// Contract holds the value of the contract edge.
	Contract *Contract `json:"contract,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]*int
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BalanceEdges) AccountOrErr() (*Contract, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contract.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// ContractOrErr returns the Contract value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BalanceEdges) ContractOrErr() (*Contract, error) {
	if e.loadedTypes[1] {
		if e.Contract == nil {
			// The edge contract was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: contract.Label}
		}
		return e.Contract, nil
	}
	return nil, &NotLoadedError{edge: "contract"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Balance) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case balance.FieldBalance:
			values[i] = new(sql.NullInt64)
		case balance.FieldID:
			values[i] = new(sql.NullString)
		case balance.ForeignKeys[0]: // balance_account
			values[i] = new(sql.NullString)
		case balance.ForeignKeys[1]: // balance_contract
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Balance", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Balance fields.
func (b *Balance) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case balance.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				b.ID = value.String
			}
		case balance.FieldBalance:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field balance", values[i])
			} else if value.Valid {
				b.Balance = uint64(value.Int64)
			}
		case balance.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field balance_account", values[i])
			} else if value.Valid {
				b.balance_account = new(string)
				*b.balance_account = value.String
			}
		case balance.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field balance_contract", values[i])
			} else if value.Valid {
				b.balance_contract = new(string)
				*b.balance_contract = value.String
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the Balance entity.
func (b *Balance) QueryAccount() *ContractQuery {
	return (&BalanceClient{config: b.config}).QueryAccount(b)
}

// QueryContract queries the "contract" edge of the Balance entity.
func (b *Balance) QueryContract() *ContractQuery {
	return (&BalanceClient{config: b.config}).QueryContract(b)
}

// Update returns a builder for updating this Balance.
// Note that you need to call Balance.Unwrap() before calling this method if this Balance
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Balance) Update() *BalanceUpdateOne {
	return (&BalanceClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Balance entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Balance) Unwrap() *Balance {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Balance is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Balance) String() string {
	var builder strings.Builder
	builder.WriteString("Balance(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", balance=")
	builder.WriteString(fmt.Sprintf("%v", b.Balance))
	builder.WriteByte(')')
	return builder.String()
}

// Balances is a parsable slice of Balance.
type Balances []*Balance

func (b Balances) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
