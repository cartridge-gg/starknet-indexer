// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarrencev/starknet-indexer/ent/balance"
	"github.com/tarrencev/starknet-indexer/ent/contract"
)

// BalanceCreate is the builder for creating a Balance entity.
type BalanceCreate struct {
	config
	mutation *BalanceMutation
	hooks    []Hook
}

// SetBalance sets the "balance" field.
func (bc *BalanceCreate) SetBalance(u uint64) *BalanceCreate {
	bc.mutation.SetBalance(u)
	return bc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (bc *BalanceCreate) SetNillableBalance(u *uint64) *BalanceCreate {
	if u != nil {
		bc.SetBalance(*u)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BalanceCreate) SetID(s string) *BalanceCreate {
	bc.mutation.SetID(s)
	return bc
}

// SetAccountID sets the "account" edge to the Contract entity by ID.
func (bc *BalanceCreate) SetAccountID(id string) *BalanceCreate {
	bc.mutation.SetAccountID(id)
	return bc
}

// SetNillableAccountID sets the "account" edge to the Contract entity by ID if the given value is not nil.
func (bc *BalanceCreate) SetNillableAccountID(id *string) *BalanceCreate {
	if id != nil {
		bc = bc.SetAccountID(*id)
	}
	return bc
}

// SetAccount sets the "account" edge to the Contract entity.
func (bc *BalanceCreate) SetAccount(c *Contract) *BalanceCreate {
	return bc.SetAccountID(c.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (bc *BalanceCreate) SetContractID(id string) *BalanceCreate {
	bc.mutation.SetContractID(id)
	return bc
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (bc *BalanceCreate) SetNillableContractID(id *string) *BalanceCreate {
	if id != nil {
		bc = bc.SetContractID(*id)
	}
	return bc
}

// SetContract sets the "contract" edge to the Contract entity.
func (bc *BalanceCreate) SetContract(c *Contract) *BalanceCreate {
	return bc.SetContractID(c.ID)
}

// Mutation returns the BalanceMutation object of the builder.
func (bc *BalanceCreate) Mutation() *BalanceMutation {
	return bc.mutation
}

// Save creates the Balance in the database.
func (bc *BalanceCreate) Save(ctx context.Context) (*Balance, error) {
	var (
		err  error
		node *Balance
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BalanceCreate) SaveX(ctx context.Context) *Balance {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BalanceCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BalanceCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BalanceCreate) defaults() {
	if _, ok := bc.mutation.Balance(); !ok {
		v := balance.DefaultBalance
		bc.mutation.SetBalance(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BalanceCreate) check() error {
	if _, ok := bc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Balance.balance"`)}
	}
	return nil
}

func (bc *BalanceCreate) sqlSave(ctx context.Context) (*Balance, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Balance.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (bc *BalanceCreate) createSpec() (*Balance, *sqlgraph.CreateSpec) {
	var (
		_node = &Balance{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: balance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: balance.FieldID,
			},
		}
	)
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: balance.FieldBalance,
		})
		_node.Balance = value
	}
	if nodes := bc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   balance.AccountTable,
			Columns: []string{balance.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.balance_account = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   balance.ContractTable,
			Columns: []string{balance.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.balance_contract = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BalanceCreateBulk is the builder for creating many Balance entities in bulk.
type BalanceCreateBulk struct {
	config
	builders []*BalanceCreate
}

// Save creates the Balance entities in the database.
func (bcb *BalanceCreateBulk) Save(ctx context.Context) ([]*Balance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Balance, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BalanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BalanceCreateBulk) SaveX(ctx context.Context) []*Balance {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BalanceCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BalanceCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
