// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"fmt"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/hashicorp/go-multierror"
	"github.com/tarrencev/starknet-indexer/ent/balance"
	"github.com/tarrencev/starknet-indexer/ent/block"
	"github.com/tarrencev/starknet-indexer/ent/contract"
	"github.com/tarrencev/starknet-indexer/ent/event"
	"github.com/tarrencev/starknet-indexer/ent/token"
	"github.com/tarrencev/starknet-indexer/ent/transaction"
	"github.com/tarrencev/starknet-indexer/ent/transactionreceipt"
)

// Noder wraps the basic Node method.
type Noder interface {
	Node(context.Context) (*Node, error)
}

// Node in the graph.
type Node struct {
	ID     string   `json:"id,omitempty"`     // node id.
	Type   string   `json:"type,omitempty"`   // node type.
	Fields []*Field `json:"fields,omitempty"` // node fields.
	Edges  []*Edge  `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string   `json:"type,omitempty"` // edge type.
	Name string   `json:"name,omitempty"` // edge name.
	IDs  []string `json:"ids,omitempty"`  // node ids (where this edge point to).
}

func (b *Balance) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     b.ID,
		Type:   "Balance",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(b.Balance); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "uint64",
		Name:  "balance",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Contract",
		Name: "account",
	}
	err = b.QueryAccount().
		Select(contract.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Contract",
		Name: "contract",
	}
	err = b.QueryContract().
		Select(contract.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (b *Block) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     b.ID,
		Type:   "Block",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(b.BlockHash); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "block_hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.ParentBlockHash); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "parent_block_hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.BlockNumber); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "uint64",
		Name:  "block_number",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.StateRoot); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "state_root",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Status); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "block.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(b.Timestamp); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "time.Time",
		Name:  "timestamp",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Transaction",
		Name: "transactions",
	}
	err = b.QueryTransactions().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "TransactionReceipt",
		Name: "transaction_receipts",
	}
	err = b.QueryTransactionReceipts().
		Select(transactionreceipt.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Contract) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     c.ID,
		Type:   "Contract",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(c.Type); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "contract.Type",
		Name:  "type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.CreatedAt); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "created_at",
		Value: string(buf),
	}
	if buf, err = json.Marshal(c.UpdatedAt); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "time.Time",
		Name:  "updated_at",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Transaction",
		Name: "transactions",
	}
	err = c.QueryTransactions().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (e *Event) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     e.ID,
		Type:   "Event",
		Fields: make([]*Field, 3),
		Edges:  make([]*Edge, 1),
	}
	var buf []byte
	if buf, err = json.Marshal(e.From); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "from",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Keys); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "[]*types.Felt",
		Name:  "keys",
		Value: string(buf),
	}
	if buf, err = json.Marshal(e.Data); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "[]*types.Felt",
		Name:  "data",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Transaction",
		Name: "transaction",
	}
	err = e.QueryTransaction().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Token) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Token",
		Fields: make([]*Field, 1),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(t.TokenId); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "uint64",
		Name:  "tokenId",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Contract",
		Name: "owner",
	}
	err = t.QueryOwner().
		Select(contract.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Contract",
		Name: "contract",
	}
	err = t.QueryContract().
		Select(contract.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (t *Transaction) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     t.ID,
		Type:   "Transaction",
		Fields: make([]*Field, 6),
		Edges:  make([]*Edge, 3),
	}
	var buf []byte
	if buf, err = json.Marshal(t.ContractAddress); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "contract_address",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.EntryPointSelector); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "string",
		Name:  "entry_point_selector",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.TransactionHash); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "transaction_hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Calldata); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "[]string",
		Name:  "calldata",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Signature); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "[]string",
		Name:  "signature",
		Value: string(buf),
	}
	if buf, err = json.Marshal(t.Nonce); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "string",
		Name:  "nonce",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Block",
		Name: "block",
	}
	err = t.QueryBlock().
		Select(block.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "TransactionReceipt",
		Name: "receipt",
	}
	err = t.QueryReceipt().
		Select(transactionreceipt.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[2] = &Edge{
		Type: "Event",
		Name: "events",
	}
	err = t.QueryEvents().
		Select(event.FieldID).
		Scan(ctx, &node.Edges[2].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (tr *TransactionReceipt) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     tr.ID,
		Type:   "TransactionReceipt",
		Fields: make([]*Field, 4),
		Edges:  make([]*Edge, 2),
	}
	var buf []byte
	if buf, err = json.Marshal(tr.TransactionHash); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "string",
		Name:  "transaction_hash",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tr.Status); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "transactionreceipt.Status",
		Name:  "status",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tr.StatusData); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "status_data",
		Value: string(buf),
	}
	if buf, err = json.Marshal(tr.L1OriginMessage); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "*types.L2Message",
		Name:  "l1_origin_message",
		Value: string(buf),
	}
	node.Edges[0] = &Edge{
		Type: "Block",
		Name: "block",
	}
	err = tr.QueryBlock().
		Select(block.FieldID).
		Scan(ctx, &node.Edges[0].IDs)
	if err != nil {
		return nil, err
	}
	node.Edges[1] = &Edge{
		Type: "Transaction",
		Name: "transaction",
	}
	err = tr.QueryTransaction().
		Select(transaction.FieldID).
		Scan(ctx, &node.Edges[1].IDs)
	if err != nil {
		return nil, err
	}
	return node, nil
}

func (c *Client) Node(ctx context.Context, id string) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}

var errNodeInvalidID = &NotFoundError{"node"}

// NodeOption allows configuring the Noder execution using functional options.
type NodeOption func(*nodeOptions)

// WithNodeType sets the node Type resolver function (i.e. the table to query).
// If was not provided, the table will be derived from the universal-id
// configuration as described in: https://entgo.io/docs/migrate/#universal-ids.
func WithNodeType(f func(context.Context, string) (string, error)) NodeOption {
	return func(o *nodeOptions) {
		o.nodeType = f
	}
}

// WithFixedNodeType sets the Type of the node to a fixed value.
func WithFixedNodeType(t string) NodeOption {
	return WithNodeType(func(context.Context, string) (string, error) {
		return t, nil
	})
}

type nodeOptions struct {
	nodeType func(context.Context, string) (string, error)
}

func (c *Client) newNodeOpts(opts []NodeOption) *nodeOptions {
	nopts := &nodeOptions{}
	for _, opt := range opts {
		opt(nopts)
	}
	if nopts.nodeType == nil {
		nopts.nodeType = func(ctx context.Context, id string) (string, error) {
			return "", fmt.Errorf("cannot resolve noder (%v) without its type", id)
		}
	}
	return nopts
}

// Noder returns a Node by its id. If the NodeType was not provided, it will
// be derived from the id value according to the universal-id configuration.
//
//		c.Noder(ctx, id)
//		c.Noder(ctx, id, ent.WithNodeType(pet.Table))
//
func (c *Client) Noder(ctx context.Context, id string, opts ...NodeOption) (_ Noder, err error) {
	defer func() {
		if IsNotFound(err) {
			err = multierror.Append(err, entgql.ErrNodeNotFound(id))
		}
	}()
	table, err := c.newNodeOpts(opts).nodeType(ctx, id)
	if err != nil {
		return nil, err
	}
	return c.noder(ctx, table, id)
}

func (c *Client) noder(ctx context.Context, table string, id string) (Noder, error) {
	switch table {
	case balance.Table:
		query := c.Balance.Query().
			Where(balance.ID(id))
		query, err := query.CollectFields(ctx, "Balance")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case block.Table:
		query := c.Block.Query().
			Where(block.ID(id))
		query, err := query.CollectFields(ctx, "Block")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case contract.Table:
		query := c.Contract.Query().
			Where(contract.ID(id))
		query, err := query.CollectFields(ctx, "Contract")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case event.Table:
		query := c.Event.Query().
			Where(event.ID(id))
		query, err := query.CollectFields(ctx, "Event")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case token.Table:
		query := c.Token.Query().
			Where(token.ID(id))
		query, err := query.CollectFields(ctx, "Token")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case transaction.Table:
		query := c.Transaction.Query().
			Where(transaction.ID(id))
		query, err := query.CollectFields(ctx, "Transaction")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	case transactionreceipt.Table:
		query := c.TransactionReceipt.Query().
			Where(transactionreceipt.ID(id))
		query, err := query.CollectFields(ctx, "TransactionReceipt")
		if err != nil {
			return nil, err
		}
		n, err := query.Only(ctx)
		if err != nil {
			return nil, err
		}
		return n, nil
	default:
		return nil, fmt.Errorf("cannot resolve noder from table %q: %w", table, errNodeInvalidID)
	}
}

func (c *Client) Noders(ctx context.Context, ids []string, opts ...NodeOption) ([]Noder, error) {
	switch len(ids) {
	case 1:
		noder, err := c.Noder(ctx, ids[0], opts...)
		if err != nil {
			return nil, err
		}
		return []Noder{noder}, nil
	case 0:
		return []Noder{}, nil
	}

	noders := make([]Noder, len(ids))
	errors := make([]error, len(ids))
	tables := make(map[string][]string)
	id2idx := make(map[string][]int, len(ids))
	nopts := c.newNodeOpts(opts)
	for i, id := range ids {
		table, err := nopts.nodeType(ctx, id)
		if err != nil {
			errors[i] = err
			continue
		}
		tables[table] = append(tables[table], id)
		id2idx[id] = append(id2idx[id], i)
	}

	for table, ids := range tables {
		nodes, err := c.noders(ctx, table, ids)
		if err != nil {
			for _, id := range ids {
				for _, idx := range id2idx[id] {
					errors[idx] = err
				}
			}
		} else {
			for i, id := range ids {
				for _, idx := range id2idx[id] {
					noders[idx] = nodes[i]
				}
			}
		}
	}

	for i, id := range ids {
		if errors[i] == nil {
			if noders[i] != nil {
				continue
			}
			errors[i] = entgql.ErrNodeNotFound(id)
		} else if IsNotFound(errors[i]) {
			errors[i] = multierror.Append(errors[i], entgql.ErrNodeNotFound(id))
		}
		ctx := graphql.WithPathContext(ctx,
			graphql.NewPathWithIndex(i),
		)
		graphql.AddError(ctx, errors[i])
	}
	return noders, nil
}

func (c *Client) noders(ctx context.Context, table string, ids []string) ([]Noder, error) {
	noders := make([]Noder, len(ids))
	idmap := make(map[string][]*Noder, len(ids))
	for i, id := range ids {
		idmap[id] = append(idmap[id], &noders[i])
	}
	switch table {
	case balance.Table:
		query := c.Balance.Query().
			Where(balance.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Balance")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case block.Table:
		query := c.Block.Query().
			Where(block.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Block")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case contract.Table:
		query := c.Contract.Query().
			Where(contract.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Contract")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case event.Table:
		query := c.Event.Query().
			Where(event.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Event")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case token.Table:
		query := c.Token.Query().
			Where(token.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Token")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case transaction.Table:
		query := c.Transaction.Query().
			Where(transaction.IDIn(ids...))
		query, err := query.CollectFields(ctx, "Transaction")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	case transactionreceipt.Table:
		query := c.TransactionReceipt.Query().
			Where(transactionreceipt.IDIn(ids...))
		query, err := query.CollectFields(ctx, "TransactionReceipt")
		if err != nil {
			return nil, err
		}
		nodes, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, node := range nodes {
			for _, noder := range idmap[node.ID] {
				*noder = node
			}
		}
	default:
		return nil, fmt.Errorf("cannot resolve noders from table %q: %w", table, errNodeInvalidID)
	}
	return noders, nil
}
