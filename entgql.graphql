directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Balance implements Node {
  id: ID!
  balance: Int!
  account: Contract
  contract: Contract
}
"""A connection to a list of items."""
type BalanceConnection {
  """A list of edges."""
  edges: [BalanceEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type BalanceEdge {
  """The item at the end of the edge."""
  node: Balance
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
BalanceWhereInput is used for filtering Balance objects.
Input was generated by ent.
"""
input BalanceWhereInput {
  not: BalanceWhereInput
  and: [BalanceWhereInput!]
  or: [BalanceWhereInput!]
  """balance field predicates"""
  balance: Int
  balanceNEQ: Int
  balanceIn: [Int!]
  balanceNotIn: [Int!]
  balanceGT: Int
  balanceGTE: Int
  balanceLT: Int
  balanceLTE: Int
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """account edge predicates"""
  hasAccount: Boolean
  hasAccountWith: [ContractWhereInput!]
  """contract edge predicates"""
  hasContract: Boolean
  hasContractWith: [ContractWhereInput!]
}
type Block implements Node {
  id: ID!
  blockHash: String!
  parentBlockHash: String!
  blockNumber: Long!
  stateRoot: String!
  status: BlockStatus!
  timestamp: Time!
  transactions: [Transaction!]
  transactionReceipts: [TransactionReceipt!]
}
"""A connection to a list of items."""
type BlockConnection {
  """A list of edges."""
  edges: [BlockEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type BlockEdge {
  """The item at the end of the edge."""
  node: Block
  """A cursor for use in pagination."""
  cursor: Cursor!
}
input BlockOrder {
  direction: OrderDirection! = ASC
  field: BlockOrderField!
}
enum BlockOrderField {
  BLOCK_NUMBER
  TIMESTAMP
}
"""BlockStatus is enum for the field status"""
enum BlockStatus @goModel(model: "github.com/tarrencev/starknet-indexer/ent/block.Status") {
  ACCEPTED_ON_L1
  ACCEPTED_ON_L2
}
"""
BlockWhereInput is used for filtering Block objects.
Input was generated by ent.
"""
input BlockWhereInput {
  not: BlockWhereInput
  and: [BlockWhereInput!]
  or: [BlockWhereInput!]
  """block_hash field predicates"""
  blockHash: String
  blockHashNEQ: String
  blockHashIn: [String!]
  blockHashNotIn: [String!]
  blockHashGT: String
  blockHashGTE: String
  blockHashLT: String
  blockHashLTE: String
  blockHashContains: String
  blockHashHasPrefix: String
  blockHashHasSuffix: String
  blockHashEqualFold: String
  blockHashContainsFold: String
  """parent_block_hash field predicates"""
  parentBlockHash: String
  parentBlockHashNEQ: String
  parentBlockHashIn: [String!]
  parentBlockHashNotIn: [String!]
  parentBlockHashGT: String
  parentBlockHashGTE: String
  parentBlockHashLT: String
  parentBlockHashLTE: String
  parentBlockHashContains: String
  parentBlockHashHasPrefix: String
  parentBlockHashHasSuffix: String
  parentBlockHashEqualFold: String
  parentBlockHashContainsFold: String
  """block_number field predicates"""
  blockNumber: Long
  blockNumberNEQ: Long
  blockNumberIn: [Long!]
  blockNumberNotIn: [Long!]
  blockNumberGT: Long
  blockNumberGTE: Long
  blockNumberLT: Long
  blockNumberLTE: Long
  """state_root field predicates"""
  stateRoot: String
  stateRootNEQ: String
  stateRootIn: [String!]
  stateRootNotIn: [String!]
  stateRootGT: String
  stateRootGTE: String
  stateRootLT: String
  stateRootLTE: String
  stateRootContains: String
  stateRootHasPrefix: String
  stateRootHasSuffix: String
  stateRootEqualFold: String
  stateRootContainsFold: String
  """status field predicates"""
  status: BlockStatus
  statusNEQ: BlockStatus
  statusIn: [BlockStatus!]
  statusNotIn: [BlockStatus!]
  """timestamp field predicates"""
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
  """transaction_receipts edge predicates"""
  hasTransactionReceipts: Boolean
  hasTransactionReceiptsWith: [TransactionReceiptWhereInput!]
}
type Contract implements Node {
  id: ID!
  type: Type!
  createdAt: Time!
  updatedAt: Time!
  transactions: [Transaction!]
}
"""A connection to a list of items."""
type ContractConnection {
  """A list of edges."""
  edges: [ContractEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type ContractEdge {
  """The item at the end of the edge."""
  node: Contract
  """A cursor for use in pagination."""
  cursor: Cursor!
}
input ContractOrder {
  direction: OrderDirection! = ASC
  field: ContractOrderField!
}
enum ContractOrderField {
  CREATED_AT
}
"""
ContractWhereInput is used for filtering Contract objects.
Input was generated by ent.
"""
input ContractWhereInput {
  not: ContractWhereInput
  and: [ContractWhereInput!]
  or: [ContractWhereInput!]
  """type field predicates"""
  type: Type
  typeNEQ: Type
  typeIn: [Type!]
  typeNotIn: [Type!]
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """transactions edge predicates"""
  hasTransactions: Boolean
  hasTransactionsWith: [TransactionWhereInput!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Event implements Node {
  id: ID!
  from: String!
  keys: [Felt]!
  data: [Felt]!
  transaction: Transaction
}
"""A connection to a list of items."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  not: EventWhereInput
  and: [EventWhereInput!]
  or: [EventWhereInput!]
  """from field predicates"""
  from: String
  fromNEQ: String
  fromIn: [String!]
  fromNotIn: [String!]
  fromGT: String
  fromGTE: String
  fromLT: String
  fromLTE: String
  fromContains: String
  fromHasPrefix: String
  fromHasSuffix: String
  fromEqualFold: String
  fromContainsFold: String
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """transaction edge predicates"""
  hasTransaction: Boolean
  hasTransactionWith: [TransactionWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}
enum OrderDirection {
  ASC
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
"""Status is enum for the field status"""
enum Status @goModel(model: "github.com/tarrencev/starknet-indexer/ent/transactionreceipt.Status") {
  UNKNOWN
  RECEIVED
  PENDING
  ACCEPTED_ON_L2
  ACCEPTED_ON_L1
  REJECTED
}
type Token implements Node {
  id: ID!
  tokenid: Int!
  owner: Contract
  contract: Contract
}
"""A connection to a list of items."""
type TokenConnection {
  """A list of edges."""
  edges: [TokenEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type TokenEdge {
  """The item at the end of the edge."""
  node: Token
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TokenWhereInput is used for filtering Token objects.
Input was generated by ent.
"""
input TokenWhereInput {
  not: TokenWhereInput
  and: [TokenWhereInput!]
  or: [TokenWhereInput!]
  """tokenId field predicates"""
  tokenid: Int
  tokenidNEQ: Int
  tokenidIn: [Int!]
  tokenidNotIn: [Int!]
  tokenidGT: Int
  tokenidGTE: Int
  tokenidLT: Int
  tokenidLTE: Int
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [ContractWhereInput!]
  """contract edge predicates"""
  hasContract: Boolean
  hasContractWith: [ContractWhereInput!]
}
type Transaction implements Node {
  id: ID!
  contractAddress: String!
  entryPointSelector: String!
  transactionHash: String!
  calldata: [String!]!
  signature: [String!]
  nonce: String!
  block: Block
  receipt: TransactionReceipt
  events: [Event!]
}
"""A connection to a list of items."""
type TransactionConnection {
  """A list of edges."""
  edges: [TransactionEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction
  """A cursor for use in pagination."""
  cursor: Cursor!
}
input TransactionOrder {
  direction: OrderDirection! = ASC
  field: TransactionOrderField!
}
enum TransactionOrderField {
  NONCE
}
type TransactionReceipt implements Node {
  id: ID!
  transactionHash: String!
  status: Status!
  statusData: String!
  l1OriginMessage: L2Message!
  block: Block
  transaction: Transaction!
}
"""A connection to a list of items."""
type TransactionReceiptConnection {
  """A list of edges."""
  edges: [TransactionReceiptEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type TransactionReceiptEdge {
  """The item at the end of the edge."""
  node: TransactionReceipt
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TransactionReceiptWhereInput is used for filtering TransactionReceipt objects.
Input was generated by ent.
"""
input TransactionReceiptWhereInput {
  not: TransactionReceiptWhereInput
  and: [TransactionReceiptWhereInput!]
  or: [TransactionReceiptWhereInput!]
  """transaction_hash field predicates"""
  transactionHash: String
  transactionHashNEQ: String
  transactionHashIn: [String!]
  transactionHashNotIn: [String!]
  transactionHashGT: String
  transactionHashGTE: String
  transactionHashLT: String
  transactionHashLTE: String
  transactionHashContains: String
  transactionHashHasPrefix: String
  transactionHashHasSuffix: String
  transactionHashEqualFold: String
  transactionHashContainsFold: String
  """status field predicates"""
  status: Status
  statusNEQ: Status
  statusIn: [Status!]
  statusNotIn: [Status!]
  """status_data field predicates"""
  statusData: String
  statusDataNEQ: String
  statusDataIn: [String!]
  statusDataNotIn: [String!]
  statusDataGT: String
  statusDataGTE: String
  statusDataLT: String
  statusDataLTE: String
  statusDataContains: String
  statusDataHasPrefix: String
  statusDataHasSuffix: String
  statusDataEqualFold: String
  statusDataContainsFold: String
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """block edge predicates"""
  hasBlock: Boolean
  hasBlockWith: [BlockWhereInput!]
  """transaction edge predicates"""
  hasTransaction: Boolean
  hasTransactionWith: [TransactionWhereInput!]
}
"""
TransactionWhereInput is used for filtering Transaction objects.
Input was generated by ent.
"""
input TransactionWhereInput {
  not: TransactionWhereInput
  and: [TransactionWhereInput!]
  or: [TransactionWhereInput!]
  """contract_address field predicates"""
  contractAddress: String
  contractAddressNEQ: String
  contractAddressIn: [String!]
  contractAddressNotIn: [String!]
  contractAddressGT: String
  contractAddressGTE: String
  contractAddressLT: String
  contractAddressLTE: String
  contractAddressContains: String
  contractAddressHasPrefix: String
  contractAddressHasSuffix: String
  contractAddressEqualFold: String
  contractAddressContainsFold: String
  """entry_point_selector field predicates"""
  entryPointSelector: String
  entryPointSelectorNEQ: String
  entryPointSelectorIn: [String!]
  entryPointSelectorNotIn: [String!]
  entryPointSelectorGT: String
  entryPointSelectorGTE: String
  entryPointSelectorLT: String
  entryPointSelectorLTE: String
  entryPointSelectorContains: String
  entryPointSelectorHasPrefix: String
  entryPointSelectorHasSuffix: String
  entryPointSelectorIsNil: Boolean
  entryPointSelectorNotNil: Boolean
  entryPointSelectorEqualFold: String
  entryPointSelectorContainsFold: String
  """transaction_hash field predicates"""
  transactionHash: String
  transactionHashNEQ: String
  transactionHashIn: [String!]
  transactionHashNotIn: [String!]
  transactionHashGT: String
  transactionHashGTE: String
  transactionHashLT: String
  transactionHashLTE: String
  transactionHashContains: String
  transactionHashHasPrefix: String
  transactionHashHasSuffix: String
  transactionHashEqualFold: String
  transactionHashContainsFold: String
  """nonce field predicates"""
  nonce: String
  nonceNEQ: String
  nonceIn: [String!]
  nonceNotIn: [String!]
  nonceGT: String
  nonceGTE: String
  nonceLT: String
  nonceLTE: String
  nonceContains: String
  nonceHasPrefix: String
  nonceHasSuffix: String
  nonceIsNil: Boolean
  nonceNotNil: Boolean
  nonceEqualFold: String
  nonceContainsFold: String
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """block edge predicates"""
  hasBlock: Boolean
  hasBlockWith: [BlockWhereInput!]
  """receipt edge predicates"""
  hasReceipt: Boolean
  hasReceiptWith: [TransactionReceiptWhereInput!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
}
"""Type is enum for the field type"""
enum Type @goModel(model: "github.com/tarrencev/starknet-indexer/ent/contract.Type") {
  UNKNOWN
  ERC20
  ERC721
}
